extends layout

block content
  input#nl.form-control(type='hidden', name='note_list', value=(note_list))
  input#sl.form-control(type='hidden', name='subject_list', value=(subject_list))
  input#tl.form-control(type='hidden', name='topic_list', value=(topic_list))
  input#stl.form-control(type='hidden', name='subtopic_list', value=(subtopic_list))
  div(class="border-bottom border-secondary")
    div(class="row gx-0")
      div(class="col-sm-12")
        <p>
        | !{user._firstname} has !{note_count} 
        if note_count == 1
          | note 
        else
          | notes 
        if subject_name
          | under !{subject_name}
        if topic_name 
          | -&gt;!{topic_name}
        if subtopic_name 
          | -&gt;!{subtopic_name}
        </p>
  div(class="border-bottom border-secondary" id='border')
    div(class="row gx-0 mb-1" id='title_row')
      div(class="col-sm-1")
        a(class='text' href='#s_subject' onClick="sort_page(this);") Subject
      div(class="col-sm-3")
        a(class='text' href='#s_topic' onClick="sort_page(this);") Topic
      div(class="col-sm-3")
        a(class='text' href='#s_subtopic' onClick="sort_page(this);") Subtopic
      div(class="col-sm-3")
        a(class='text' href='#s_title' onClick="sort_page(this);") Title
      div(class="col-sm-1")
        a(class='text' href='#s_creationDate' onClick="sort_page(this);") Creation date
      div(class="col-sm-1")
        a(class='text' href='#s_updateDate' onClick="sort_page(this);") Update date
      script(type="text/javascript").
        let border = document.getElementById('border'); // div element to which all dynamically sorted elements will be added
        let nl = document.getElementById('nl'); // note_list hidden element
        let sl = document.getElementById('sl'); // subject_list hidden element
        let tl = document.getElementById('tl'); // topic_list hidden element
        let stl = document.getElementById('stl'); // subtopic_list hidden element
        let nl_val = JSON.parse(nl.value);      // parse json in mongodb generated note_list to get array of key value pairs
        let sl_val = JSON.parse(sl.value);      // parse json in mongodb generated subject_list to get array of key value pairs
        let tl_val = JSON.parse(tl.value);      // parse json in mongodb generated topic_list to get array of key value pairs
        let stl_val = JSON.parse(stl.value);      // parse json in mongodb generated subtopic_list to get array of key value pairs
        
        let rows = [];                          // generate a row for each note with subject, topic and subtopic titles populated for sorting
        let subject, topic, title, url, created, updated;
        for (let nl_row of Object.values(nl_val)) {
          for (let sl_row of Object.values(sl_val)) { 
            if (sl_row._id === nl_row.subject) {
              subject = sl_row.title;
            }
          }
          for (let tl_row of Object.values(tl_val)) { 
            if (tl_row._id === nl_row.topic) {
              topic = tl_row.title;
            }
          }
          for (let stl_row of Object.values(stl_val)) { 
            if (stl_row._id === nl_row.subtopic) {
              subtopic = stl_row.title;
            }
          }
          url = nl_row.update_url;
          title = nl_row.title;
          created = nl_row.creationDate_formatted;
          updated = nl_row.updateDate_formatted;
          rows.push({'subject':subject,'topic':topic,'subtopic':subtopic,'url':url,'title':title,'creationDate':created,'updateDate':updated});
        }
        var sort_order = 'asc';
        sort_page();
        function sort_page(url) {
          while (border.lastChild.id !== 'title_row')
              border.removeChild(border.lastChild);
          // sort note list based on column title
          let hash = 'title';
          if (url)
            hash = url.hash.substr(3);
          rows.sort(compareValues(hash, sort_order));
          if (sort_order == 'asc')
            sort_order = 'desc';
          else
            sort_order = 'asc';
          
          // render sorted list to page
          let row_count = 0;
          for (let row of Object.values(rows)) {
            let newRowDiv = document.createElement("div");
            newRowDiv.classList.add('row', 'gx-0');
            newRowDiv.id = 'data_row' + row_count;
            row_count++;
            border.appendChild(newRowDiv);
            addNoteElement(1, newRowDiv, row.subject);
            addNoteElement(3, newRowDiv, row.topic);
            addNoteElement(3, newRowDiv, row.subtopic);
            addNoteElement(3, newRowDiv, row.title, row.url);
            addNoteElement(1, newRowDiv, row.creationDate);
            addNoteElement(1, newRowDiv, row.updateDate);
          }
          // add element to list div
          function addNoteElement(width, rowDiv, text, url) {
            let newDiv = document.createElement("div");
            newDiv.classList.add('col-sm-' + width);
            let newElement;
            if (url) {
              newElement = document.createElement('a');
              newElement.href  = url;
              newElement.textContent = text;
            } else {
              newElement = document.createElement("p");
              let newElement2 = document.createTextNode(text);
              newElement.appendChild(newElement2);
            }
            newDiv.appendChild(newElement);
            rowDiv.appendChild(newDiv);
          }
          // compare function used by sort
          function compareValues(key, order = 'asc') {
            return function innerSort(a, b) {
              if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                // property doesn't exist on either object
                return 0;
              }

              let varA, varB;

              if ((key == 'creationDate') || (key == 'updateDate')) {
                // parse dates to get seconds from unix time 0
                varA = Date.parse(a[key]);
                varB = Date.parse(b[key]);
              } else {
                // assume text if not date
                varA = (typeof a[key] === 'string')
                  ? a[key].toUpperCase() : a[key];
                varB = (typeof b[key] === 'string')
                  ? b[key].toUpperCase() : b[key];
              }

              let comparison = 0;
              if (varA > varB) {
                comparison = 1;
              } else if (varA < varB) {
                comparison = -1;
              }
              return (
                (order === 'desc') ? (comparison * -1) : comparison
              );
            }
          }
        }